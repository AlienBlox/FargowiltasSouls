// Decompiled with JetBrains decompiler
// Type: <>z__ReadOnlyArray`1
// Assembly: FargowiltasSouls, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1A7A46DC-AE03-47A6-B5D0-CF3B5722B0BF
// Assembly location: C:\Users\Alien\OneDrive\文档\My Games\Terraria\tModLoader\ModSources\AlienBloxMod\Libraries\FargowiltasSouls.dll

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

#nullable enable
internal sealed class \u003C\u003Ez__ReadOnlyArray<T> : 
  IEnumerable,
  ICollection,
  IList,
  IEnumerable<
  #nullable disable
  T>,
  IReadOnlyCollection<T>,
  IReadOnlyList<T>,
  ICollection<T>,
  IList<T>
{
  public \u003C\u003Ez__ReadOnlyArray(T[] items) => this._items = items;

  #nullable enable
  IEnumerator IEnumerable.GetEnumerator() => this._items.GetEnumerator();

  int ICollection.Count => this._items.Length;

  bool ICollection.IsSynchronized => false;

  #nullable disable
  object ICollection.SyncRoot => (object) this;

  void ICollection.CopyTo(
  #nullable enable
  Array array, int index) => this._items.CopyTo(array, index);

  [IndexerName("System.Collections.IList.this[]")]
  #nullable disable
  object IList.this[int index]
  {
    get => (object) this._items[index];
    set => throw new NotSupportedException();
  }

  bool IList.IsFixedSize => true;

  bool IList.IsReadOnly => true;

  int IList.Add(
  #nullable enable
  object? value) => throw new NotSupportedException();

  void IList.Clear() => throw new NotSupportedException();

  bool IList.Contains(object? value) => this._items.Contains(value);

  int IList.IndexOf(object? value) => this._items.IndexOf(value);

  void IList.Insert(int index, object? value) => throw new NotSupportedException();

  void IList.Remove(object? value) => throw new NotSupportedException();

  void IList.RemoveAt(int index) => throw new NotSupportedException();

  IEnumerator<
  #nullable disable
  T> IEnumerable<T>.GetEnumerator() => ((IEnumerable<T>) this._items).GetEnumerator();

  int IReadOnlyCollection<T>.Count => this._items.Length;

  [IndexerName("System.Collections.Generic.IReadOnlyList<T>.this[]")]
  T IReadOnlyList<T>.this[int index] => this._items[index];

  int ICollection<T>.Count => this._items.Length;

  bool ICollection<T>.IsReadOnly => true;

  void ICollection<T>.Add(T item) => throw new NotSupportedException();

  void ICollection<T>.Clear() => throw new NotSupportedException();

  bool ICollection<T>.Contains(T item) => ((ICollection<T>) this._items).Contains(item);

  void ICollection<T>.CopyTo(
  #nullable enable
  #nullable disable
  T[] array, int arrayIndex) => ((ICollection<T>) this._items).CopyTo(array, arrayIndex);

  bool ICollection<T>.Remove(T item) => throw new NotSupportedException();

  [IndexerName("System.Collections.Generic.IList<T>.this[]")]
  T IList<T>.this[int index]
  {
    get => this._items[index];
    set => throw new NotSupportedException();
  }

  int IList<T>.IndexOf(T item) => ((IList<T>) this._items).IndexOf(item);

  void IList<T>.Insert(int index, T item) => throw new NotSupportedException();

  void IList<T>.RemoveAt(int index) => throw new NotSupportedException();
}
